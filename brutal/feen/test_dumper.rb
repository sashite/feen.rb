# frozen_string_literal: true

require "simplecov"

::SimpleCov.command_name "Brutal test suite"
::SimpleCov.start

begin
  require_relative "../../lib/feen"
rescue ::LoadError
  # :nocov:
  require "../../lib/feen"
  # :nocov:
end

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: {}
)

if actual.itself != "8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: {}
)

if actual.itself != "8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: {}
)

if actual.itself != "8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: {}
)

if actual.itself != "8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQ/yByNyR5/1yPyPyPyPyPyPyP/yP7/8/2bRbP4/6gPgR/bNbP6//4gPgNbBbP/8/2gPgBbKbP2/8/gPgQbQbP4/6gPgK/bBbP6/4gPgBbNbP//8/2gPgNbRbP2/8/gPgR6/8/3rPrPrPrPrP/rPrPrP5/1rRrNrBrQrKrBrN//rR7/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQ/yByNyR5/1yPyPyPyPyPyPyP/yP7/8/2bRbP4/6gPgR/bNbP6//4gPgNbBbP/8/2gPgBbKbP2/8/gPgQbQbP4/6gPgK/bBbP6/4gPgBbNbP//8/2gPgNbRbP2/8/gPgR6/8/3rPrPrPrPrP/rPrPrP5/1rRrNrBrQrKrBrN//rR7/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQ/yByNyR5/1yPyPyPyPyPyPyP/yP7/8/2bRbP4/6gPgR/bNbP6//4gPgNbBbP/8/2gPgBbKbP2/8/gPgQbQbP4/6gPgK/bBbP6/4gPgBbNbP//8/2gPgNbRbP2/8/gPgR6/8/3rPrPrPrPrP/rPrPrP5/1rRrNrBrQrKrBrN//rR7/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQ/yByNyR5/1yPyPyPyPyPyPyP/yP7/8/2bRbP4/6gPgR/bNbP6//4gPgNbBbP/8/2gPgBbKbP2/8/gPgQbQbP4/6gPgK/bBbP6/4gPgBbNbP//8/2gPgNbRbP2/8/gPgR6/8/3rPrPrPrPrP/rPrPrP5/1rRrNrBrQrKrBrN//rR7/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

if actual.itself != "♜♞♝♛♚♝♞♜/♟♟♟♟♟♟♟♟/8/8/8/8/♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

if actual.itself != "♜♞♝♛♚♝♞♜/♟♟♟♟♟♟♟♟/8/8/8/8/♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

if actual.itself != "♜♞♝♛♚♝♞♜/♟♟♟♟♟♟♟♟/8/8/8/8/♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

if actual.itself != "♜♞♝♛♚♝♞♜/♟♟♟♟♟♟♟♟/8/8/8/8/♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

if actual.itself != "lnsgkgsn/l1r5/b1pppppp/ppp5/8/8/6PP/PPPPPPP1//B5R1/LNSGKGSN/L7/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

if actual.itself != "lnsgkgsn/l1r5/b1pppppp/ppp5/8/8/6PP/PPPPPPP1//B5R1/LNSGKGSN/L7/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

if actual.itself != "lnsgkgsn/l1r5/b1pppppp/ppp5/8/8/6PP/PPPPPPP1//B5R1/LNSGKGSN/L7/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

if actual.itself != "lnsgkgsn/l1r5/b1pppppp/ppp5/8/8/6PP/PPPPPPP1//B5R1/LNSGKGSN/L7/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

if actual.itself != "3sks2/8/6+P1/8/8/3+B4/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

if actual.itself != "3sks2/8/6+P1/8/8/3+B4/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

if actual.itself != "3sks2/8/6+P1/8/8/3+B4/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

if actual.itself != "3sks2/8/6+P1/8/8/3+B4/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

if actual.itself != "車馬象士將士象馬/車7/3砲4/1砲1卒1卒1卒/1卒1卒4/8/6兵1/兵1兵1兵1兵1//炮5炮1/8/1俥傌相仕帥仕相/傌俥6/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

if actual.itself != "車馬象士將士象馬/車7/3砲4/1砲1卒1卒1卒/1卒1卒4/8/6兵1/兵1兵1兵1兵1//炮5炮1/8/1俥傌相仕帥仕相/傌俥6/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

if actual.itself != "車馬象士將士象馬/車7/3砲4/1砲1卒1卒1卒/1卒1卒4/8/6兵1/兵1兵1兵1兵1//炮5炮1/8/1俥傌相仕帥仕相/傌俥6/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [8, 8, 8],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

if actual.itself != "車馬象士將士象馬/車7/3砲4/1砲1卒1卒1卒/1卒1卒4/8/6兵1/兵1兵1兵1兵1//炮5炮1/8/1俥傌相仕帥仕相/傌俥6/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8//8/8/8/8/8/8/8/8 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: {}
)

raise if actual.itself != "9/9/9/9/9/9/9/9/9/9 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: {}
)

raise if actual.itself != "9/9/9/9/9/9/9/9/9/9 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: {}
)

raise if actual.itself != "9/9/9/9/9/9/9/9/9/9 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: {}
)

raise if actual.itself != "9/9/9/9/9/9/9/9/9/9 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

raise if actual.itself != "3yRyNyByKyQyB/yNyR6yP/yPyPyPyPyPyPyP2/9/6bRbP1/9/gPgRbNbP5/5gPgNbBbP/9/1gPgBbKbP4 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

raise if actual.itself != "3yRyNyByKyQyB/yNyR6yP/yPyPyPyPyPyPyP2/9/6bRbP1/9/gPgRbNbP5/5gPgNbBbP/9/1gPgBbKbP4 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

raise if actual.itself != "3yRyNyByKyQyB/yNyR6yP/yPyPyPyPyPyPyP2/9/6bRbP1/9/gPgRbNbP5/5gPgNbBbP/9/1gPgBbKbP4 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

raise if actual.itself != "3yRyNyByKyQyB/yNyR6yP/yPyPyPyPyPyPyP2/9/6bRbP1/9/gPgRbNbP5/5gPgNbBbP/9/1gPgBbKbP4 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟/♟♟♟♟♟♟♟2/9/9/9/3♙♙♙♙♙♙/♙♙♖♘♗♕♔♗♘/♖8/9/9 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟/♟♟♟♟♟♟♟2/9/9/9/3♙♙♙♙♙♙/♙♙♖♘♗♕♔♗♘/♖8/9/9 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟/♟♟♟♟♟♟♟2/9/9/9/3♙♙♙♙♙♙/♙♙♖♘♗♕♔♗♘/♖8/9/9 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟/♟♟♟♟♟♟♟2/9/9/9/3♙♙♙♙♙♙/♙♙♖♘♗♕♔♗♘/♖8/9/9 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL/9 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL/9 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL/9 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL/9 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks3/9/4+P4/9/7+B1/9/9/9/9/9 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks3/9/4+P4/9/7+B1/9/9/9/9/9 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks3/9/4+P4/9/7+B1/9/9/9/9/9 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks3/9/4+P4/9/7+B1/9/9/9/9/9 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [10, 9],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車/9/1砲5砲1/卒1卒1卒1卒1卒/9/9/兵1兵1兵1兵1兵/1炮5炮1/9/俥傌相仕帥仕相傌俥 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [10, 9],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車/9/1砲5砲1/卒1卒1卒1卒1卒/9/9/兵1兵1兵1兵1兵/1炮5炮1/9/俥傌相仕帥仕相傌俥 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [10, 9],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車/9/1砲5砲1/卒1卒1卒1卒1卒/9/9/兵1兵1兵1兵1兵/1炮5炮1/9/俥傌相仕帥仕相傌俥 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [10, 9],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車/9/1砲5砲1/卒1卒1卒1卒1卒/9/9/兵1兵1兵1兵1兵/1炮5炮1/9/俥傌相仕帥仕相傌俥 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: {}
)

raise if actual.itself != "14/14/14/14/14/14/14/14/14/14/14/14/14/14 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: {}
)

raise if actual.itself != "14/14/14/14/14/14/14/14/14/14/14/14/14/14 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: {}
)

raise if actual.itself != "14/14/14/14/14/14/14/14/14/14/14/14/14/14 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: {}
)

raise if actual.itself != "14/14/14/14/14/14/14/14/14/14/14/14/14/14 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQyByNyR3/3yPyPyPyPyPyPyPyP3/14/bRbP10gPgR/bNbP10gPgN/bBbP10gPgB/bKbP10gPgQ/bQbP10gPgK/bBbP10gPgB/bNbP10gPgN/bRbP10gPgR/14/3rPrPrPrPrPrPrPrP3/3rRrNrBrQrKrBrNrR3 0"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQyByNyR3/3yPyPyPyPyPyPyPyP3/14/bRbP10gPgR/bNbP10gPgN/bBbP10gPgB/bKbP10gPgQ/bQbP10gPgK/bBbP10gPgB/bNbP10gPgN/bRbP10gPgR/14/3rPrPrPrPrPrPrPrP3/3rRrNrBrQrKrBrNrR3 1"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQyByNyR3/3yPyPyPyPyPyPyPyP3/14/bRbP10gPgR/bNbP10gPgN/bBbP10gPgB/bKbP10gPgQ/bQbP10gPgK/bBbP10gPgB/bNbP10gPgN/bRbP10gPgR/14/3rPrPrPrPrPrPrPrP3/3rRrNrBrQrKrBrNrR3 2"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: { 3 => "yR", 4 => "yN", 5 => "yB", 6 => "yK", 7 => "yQ", 8 => "yB", 9 => "yN", 10 => "yR", 17 => "yP", 18 => "yP", 19 => "yP", 20 => "yP", 21 => "yP", 22 => "yP", 23 => "yP", 24 => "yP", 42 => "bR", 56 => "bN", 70 => "bB", 84 => "bK", 98 => "bQ", 112 => "bB", 126 => "bN", 140 => "bR", 43 => "bP", 57 => "bP", 71 => "bP", 85 => "bP", 99 => "bP", 113 => "bP", 127 => "bP", 141 => "bP", 55 => "gR", 69 => "gN", 83 => "gB", 97 => "gQ", 111 => "gK", 125 => "gB", 139 => "gN", 153 => "gR", 54 => "gP", 68 => "gP", 82 => "gP", 96 => "gP", 110 => "gP", 124 => "gP", 138 => "gP", 152 => "gP", 185 => "rR", 186 => "rN", 187 => "rB", 188 => "rQ", 189 => "rK", 190 => "rB", 191 => "rN", 192 => "rR", 171 => "rP", 172 => "rP", 173 => "rP", 174 => "rP", 175 => "rP", 176 => "rP", 177 => "rP", 178 => "rP" }
)

if actual.itself != "3yRyNyByKyQyByNyR3/3yPyPyPyPyPyPyPyP3/14/bRbP10gPgR/bNbP10gPgN/bBbP10gPgB/bKbP10gPgQ/bQbP10gPgK/bBbP10gPgB/bNbP10gPgN/bRbP10gPgR/14/3rPrPrPrPrPrPrPrP3/3rRrNrBrQrKrBrNrR3 3"
  raise
end

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟♟♟♟♟♟/♟♟12/14/6♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖6/14/14/14/14/14/14/14/14/14 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟♟♟♟♟♟/♟♟12/14/6♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖6/14/14/14/14/14/14/14/14/14 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟♟♟♟♟♟/♟♟12/14/6♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖6/14/14/14/14/14/14/14/14/14 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: { 0 => "♜", 1 => "♞", 2 => "♝", 3 => "♛", 4 => "♚", 5 => "♝", 6 => "♞", 7 => "♜", 8 => "♟", 9 => "♟", 10 => "♟", 11 => "♟", 12 => "♟", 13 => "♟", 14 => "♟", 15 => "♟", 48 => "♙", 49 => "♙", 50 => "♙", 51 => "♙", 52 => "♙", 53 => "♙", 54 => "♙", 55 => "♙", 56 => "♖", 57 => "♘", 58 => "♗", 59 => "♕", 60 => "♔", 61 => "♗", 62 => "♘", 63 => "♖" }
)

raise if actual.itself != "♜♞♝♛♚♝♞♜♟♟♟♟♟♟/♟♟12/14/6♙♙♙♙♙♙♙♙/♖♘♗♕♔♗♘♖6/14/14/14/14/14/14/14/14/14 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl1r3/2b1ppppppppp1/14/12PP/PPPPPPP1B5/R1LNSGKGSNL3/14/14/14/14/14/14/14/14 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl1r3/2b1ppppppppp1/14/12PP/PPPPPPP1B5/R1LNSGKGSNL3/14/14/14/14/14/14/14/14 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl1r3/2b1ppppppppp1/14/12PP/PPPPPPP1B5/R1LNSGKGSNL3/14/14/14/14/14/14/14/14 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: { 0 => "l", 1 => "n", 2 => "s", 3 => "g", 4 => "k", 5 => "g", 6 => "s", 7 => "n", 8 => "l", 10 => "r", 16 => "b", 18 => "p", 19 => "p", 20 => "p", 21 => "p", 22 => "p", 23 => "p", 24 => "p", 25 => "p", 26 => "p", 54 => "P", 55 => "P", 56 => "P", 57 => "P", 58 => "P", 59 => "P", 60 => "P", 61 => "P", 62 => "P", 64 => "B", 70 => "R", 72 => "L", 73 => "N", 74 => "S", 75 => "G", 76 => "K", 77 => "G", 78 => "S", 79 => "N", 80 => "L" }
)

raise if actual.itself != "lnsgkgsnl1r3/2b1ppppppppp1/14/12PP/PPPPPPP1B5/R1LNSGKGSNL3/14/14/14/14/14/14/14/14 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks8/8+P5/14/1+B12/14/14/14/14/14/14/14/14/14/14 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks8/8+P5/14/1+B12/14/14/14/14/14/14/14/14/14/14 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks8/8+P5/14/1+B12/14/14/14/14/14/14/14/14/14/14 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: { 3 => "s", 4 => "k", 5 => "s", 22 => "+P", 43 => "+B" }
)

raise if actual.itself != "3sks8/8+P5/14/1+B12/14/14/14/14/14/14/14/14/14/14 3"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    0,
  board_shape:     [14, 14],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車5/5砲5砲1卒/1卒1卒1卒1卒6/12兵1/兵1兵1兵1兵1炮5/炮10俥傌相/仕帥仕相傌俥8/14/14/14/14/14/14/14 0"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    1,
  board_shape:     [14, 14],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車5/5砲5砲1卒/1卒1卒1卒1卒6/12兵1/兵1兵1兵1兵1炮5/炮10俥傌相/仕帥仕相傌俥8/14/14/14/14/14/14/14 1"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    2,
  board_shape:     [14, 14],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車5/5砲5砲1卒/1卒1卒1卒1卒6/12兵1/兵1兵1兵1兵1炮5/炮10俥傌相/仕帥仕相傌俥8/14/14/14/14/14/14/14 2"

# Finishing a test

# ------------------------------------------------------------------------------

# Starting a test

actual = Feen.dump(
  side_to_move:    3,
  board_shape:     [14, 14],
  piece_placement: { 0 => "車", 1 => "馬", 2 => "象", 3 => "士", 4 => "將", 5 => "士", 6 => "象", 7 => "馬", 8 => "車", 19 => "砲", 25 => "砲", 27 => "卒", 29 => "卒", 31 => "卒", 33 => "卒", 35 => "卒", 54 => "兵", 56 => "兵", 58 => "兵", 60 => "兵", 62 => "兵", 64 => "炮", 70 => "炮", 81 => "俥", 82 => "傌", 83 => "相", 84 => "仕", 85 => "帥", 86 => "仕", 87 => "相", 88 => "傌", 89 => "俥" }
)

raise if actual.itself != "車馬象士將士象馬車5/5砲5砲1卒/1卒1卒1卒1卒6/12兵1/兵1兵1兵1兵1炮5/炮10俥傌相/仕帥仕相傌俥8/14/14/14/14/14/14/14 3"

# Finishing a test

# ------------------------------------------------------------------------------

# End of the brutal test
